INCLUDE(CMakeForceCompiler)
 
# this one is important
set(CMAKE_SYSTEM_NAME       Generic)
set(CMAKE_SYSTEM_PROCESSOR  STM32F4)
CMAKE_FORCE_C_COMPILER(arm-none-eabi-gcc GNU)
CMAKE_FORCE_CXX_COMPILER(arm-none-eabi-g++ GNU)
SET(CMAKE_ASM_COMPILER arm-none-eabi-gcc)

set(CPU cortex-m4)
set(CMAKE_C_FLAGS "-mcpu=${CPU} -mthumb -nostdlib -nodefaultlibs -ffreestanding")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g3 -gdwarf-2")
set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -fno-exceptions -fno-rtti -fno-use-cxa-atexit")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g3 -gdwarf-2")
set(CMAKE_ASM_FLAGS "${CMAKE_C_FLAGS}")

set(CMAKE_EXE_LINKER_FLAGS "")
set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")
set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "")

SET(CMAKE_C_OUTPUT_EXTENSION   ".o")
SET(CMAKE_CXX_OUTPUT_EXTENSION ".o")
SET(CMAKE_ASM_OUTPUT_EXTENSION ".o")
SET(CMAKE_EXECUTABLE_SUFFIX    "")
SET(CMAKE_STATIC_LIBRARY_PREFIX "lib")
SET(CMAKE_STATIC_LIBRARY_SUFFIX ".a")

# where is the target environment 
# SET(CMAKE_FIND_ROOT_PATH /opt/gcc-arm-none-eabi-4_7-2013q2)

# search for programs in the build host directories
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# for libraries and headers in the target directories
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
